Conceitos básicos de SO - OK!

[Processos]
  
- Cria um processo com fork()
  - Exemplo em ../LAB/fork.c
  - Retorno:
    - para o filho: 0
    - para o pai: PID do filho
    - erro: -1
  - Duplica o processo atual, executando o novo processo num espaço de memória
  diferente.
- nos SO baseado em UNIX, o processo raiz (pai de todos os processos) é o init
- Condições que podem provocar o término de um processo
  1. Saída normal (voluntária)
    - exit()
  2. Saída por erro (voluntária)
    - ex: gcc filename.c (mas filename.c não existe)
  3. Erro Fatal (involuntária)
    - divisão por 0
    - segmetation fault (acesso indevido à memória)
    - execução de uma instrução ilegal
  4. Destruído por outro processo (involuntária)
    - sinais (kill)
- Estados de um processo:
  1. Em execução: realmente usando a CPU naquele instante
  2. Pronto: executável, temporariamente parado para deixar outro processo
  ser executado
  3. Bloqueado: incapaz de ser executado até que algum evento externo aconteça
    - pode acontecer de duas formas:
      - chamada de sistema (block ou pause - SIGSTOP também ??)
      - quando não há entradas disponíveis para que o processo continue sua
      execução
  4. Indefinido: processo desconhecido ao nível do SO
  - Transições entre 'em execução' e 'pronto' podem ocorrem num escalonamento
  de processos
- Tipos de Processos
  - CPU-bound: procesos que utilizam muito o processador
    - tempo de exucução definido pelos ciclos de processador
  - I/O-bound: processos que realizam muito entrada e saída
    - tempo de execução definido pela duração das operações E/S
  - o ideal é um balanceamento entre CPU-buond e I/O-bound

[Sinais]

- SO oferece sinais para enviar a algum processo
- Há como realizar tratamento de sinais
  - Obs: SIGKILL e SIGSTOP não podem ser capturados, bloqueados ou ignorados!
- Pode ser enviado sinais diretamento com kill
  - kill(pid_t pid, int sig)
